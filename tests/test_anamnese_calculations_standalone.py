"""
Script de teste standalone para validar c√°lculos metab√≥licos da Anamnese Inteligente
Vers√£o sem depend√™ncias do Firebase para testes isolados
"""

import math
from datetime import datetime, date
from typing import Dict, List, Optional, Any, Tuple
import json

class MetabolicCalculator:
    """Calculadora metab√≥lica avan√ßada com fatores brasileiros"""
    
    @staticmethod
    def calculate_bmr(weight: float, height: float, age: int, gender: str, 
                     body_fat_percentage: Optional[float] = None) -> float:
        """
        Calcula Taxa Metab√≥lica Basal usando f√≥rmula Mifflin-St Jeor aprimorada
        
        Args:
            weight: Peso em kg
            height: Altura em cm
            age: Idade em anos
            gender: 'male' ou 'female'
            body_fat_percentage: % de gordura corporal (opcional)
        
        Returns:
            BMR em kcal/dia
        """
        # F√≥rmula Mifflin-St Jeor base
        if gender.lower() == 'male':
            bmr = (10 * weight) + (6.25 * height) - (5 * age) + 5
        else:
            bmr = (10 * weight) + (6.25 * height) - (5 * age) - 161
        
        # Ajuste por composi√ß√£o corporal (se dispon√≠vel)
        if body_fat_percentage is not None:
            # F√≥rmula Katch-McArdle para pessoas com % gordura conhecido
            lean_body_mass = weight * (1 - body_fat_percentage / 100)
            bmr_katch = 370 + (21.6 * lean_body_mass)
            
            # M√©dia ponderada entre as duas f√≥rmulas
            bmr = (bmr * 0.6) + (bmr_katch * 0.4)
        
        return round(bmr, 1)
    
    @staticmethod
    def get_activity_factor(activity_level: str, training_experience: str = "iniciante") -> float:
        """
        Calcula fator de atividade baseado no n√≠vel e experi√™ncia
        
        Args:
            activity_level: N√≠vel de atividade
            training_experience: Experi√™ncia com treinamento
        
        Returns:
            Fator multiplicador para TDEE
        """
        base_factors = {
            "sedentario": 1.2,
            "leve": 1.375,
            "moderado": 1.55,
            "ativo": 1.725,
            "muito_ativo": 1.9
        }
        
        base_factor = base_factors.get(activity_level, 1.55)
        
        # Ajuste por experi√™ncia (pessoas experientes t√™m metabolismo mais eficiente)
        experience_adjustments = {
            "iniciante": 1.0,
            "intermediario": 0.98,
            "avancado": 0.95,
            "expert": 0.92
        }
        
        experience_factor = experience_adjustments.get(training_experience, 1.0)
        
        return round(base_factor * experience_factor, 3)
    
    @staticmethod
    def calculate_tdee(bmr: float, activity_factor: float, 
                      stress_level: int = 5, sleep_hours: float = 7.5,
                      medications: List[str] = None) -> float:
        """
        Calcula Gasto Energ√©tico Total Di√°rio com fatores adicionais
        
        Args:
            bmr: Taxa Metab√≥lica Basal
            activity_factor: Fator de atividade
            stress_level: N√≠vel de estresse (1-10)
            sleep_hours: Horas de sono por noite
            medications: Lista de medicamentos
        
        Returns:
            TDEE em kcal/dia
        """
        if medications is None:
            medications = []
            
        # TDEE base
        tdee = bmr * activity_factor
        
        # Ajuste por estresse (estresse alto aumenta cortisol e pode afetar metabolismo)
        if stress_level >= 8:
            stress_factor = 1.05  # +5% para estresse muito alto
        elif stress_level >= 6:
            stress_factor = 1.02  # +2% para estresse alto
        elif stress_level <= 3:
            stress_factor = 0.98  # -2% para estresse baixo
        else:
            stress_factor = 1.0
        
        # Ajuste por qualidade do sono
        if sleep_hours < 6:
            sleep_factor = 0.95  # -5% para sono insuficiente
        elif sleep_hours > 9:
            sleep_factor = 1.02  # +2% para muito sono
        else:
            sleep_factor = 1.0
        
        # Ajuste por medicamentos que afetam metabolismo
        medication_factor = 1.0
        if medications:
            metabolism_affecting_meds = [
                'metformina', 'levotiroxina', 'propranolol', 
                'corticoides', 'antidepressivos', 'insulina'
            ]
            
            for med in medications:
                med_lower = med.lower()
                if any(affecting_med in med_lower for affecting_med in metabolism_affecting_meds):
                    if 'metformina' in med_lower:
                        medication_factor *= 0.97  # Metformina pode reduzir metabolismo
                    elif 'levotiroxina' in med_lower:
                        medication_factor *= 1.05  # Horm√¥nio da tireoide aumenta metabolismo
                    elif 'corticoides' in med_lower:
                        medication_factor *= 1.08  # Corticoides aumentam metabolismo
                    # Adicionar outros medicamentos conforme necess√°rio
        
        # Aplicar todos os fatores
        tdee = tdee * stress_factor * sleep_factor * medication_factor
        
        return round(tdee, 1)
    
    @staticmethod
    def calculate_macro_distribution(calories: float, goal: str, weight: float,
                                   activity_level: str, body_fat_percentage: Optional[float] = None) -> Dict[str, float]:
        """
        Calcula distribui√ß√£o de macronutrientes baseada no objetivo
        
        Args:
            calories: Calorias totais
            goal: Objetivo nutricional
            weight: Peso corporal em kg
            activity_level: N√≠vel de atividade
            body_fat_percentage: % de gordura corporal
        
        Returns:
            Dict com gramas de prote√≠na, carboidratos e gordura
        """
        # Prote√≠na base por kg de peso corporal
        protein_per_kg = {
            "perda_peso": 2.2,
            "ganho_massa": 2.0,
            "manutencao": 1.8,
            "performance": 2.0,
            "saude_geral": 1.6,
            "recomposicao_corporal": 2.4
        }
        
        protein_grams = weight * protein_per_kg.get(goal, 1.8)
        
        # Ajuste de prote√≠na por atividade
        if activity_level in ["ativo", "muito_ativo"]:
            protein_grams *= 1.1
        
        # Gordura: 20-35% das calorias (priorizamos 25-30%)
        fat_percentage = 0.25 if goal == "ganho_massa" else 0.30
        fat_calories = calories * fat_percentage
        fat_grams = fat_calories / 9  # 9 kcal por grama de gordura
        
        # Carboidratos: resto das calorias
        protein_calories = protein_grams * 4  # 4 kcal por grama de prote√≠na
        carb_calories = calories - protein_calories - fat_calories
        carb_grams = carb_calories / 4  # 4 kcal por grama de carboidrato
        
        # Ajustes para objetivos espec√≠ficos
        if goal == "perda_peso":
            # Reduzir carboidratos, manter prote√≠na alta
            carb_grams *= 0.8
            protein_grams *= 1.1
        elif goal == "ganho_massa":
            # Aumentar carboidratos para energia
            carb_grams *= 1.2
        
        # Fibra: 25-35g por dia
        fiber_grams = min(35, max(25, calories / 100))  # Aproximadamente 1g por 100 kcal
        
        return {
            "protein_grams": round(protein_grams, 1),
            "carbs_grams": round(max(carb_grams, 50), 1),  # M√≠nimo 50g carboidratos
            "fat_grams": round(fat_grams, 1),
            "fiber_grams": round(fiber_grams, 1)
        }

def test_bmr_calculations():
    """Testa c√°lculos de BMR com diferentes perfis"""
    print("üßÆ TESTANDO C√ÅLCULOS DE BMR")
    print("=" * 50)
    
    calculator = MetabolicCalculator()
    
    # Casos de teste
    test_cases = [
        {
            "name": "Homem jovem ativo",
            "weight": 80,
            "height": 180,
            "age": 25,
            "gender": "male",
            "body_fat": 12
        },
        {
            "name": "Mulher adulta sedent√°ria",
            "weight": 65,
            "height": 165,
            "age": 35,
            "gender": "female",
            "body_fat": 25
        },
        {
            "name": "Homem idoso",
            "weight": 75,
            "height": 175,
            "age": 60,
            "gender": "male",
            "body_fat": None
        },
        {
            "name": "Mulher jovem atleta",
            "weight": 55,
            "height": 160,
            "age": 22,
            "gender": "female",
            "body_fat": 16
        }
    ]
    
    results = []
    
    for case in test_cases:
        bmr = calculator.calculate_bmr(
            weight=case["weight"],
            height=case["height"],
            age=case["age"],
            gender=case["gender"],
            body_fat_percentage=case["body_fat"]
        )
        
        # Valida√ß√µes
        expected_range = (1200, 2500)  # Range t√≠pico de BMR
        is_valid = expected_range[0] <= bmr <= expected_range[1]
        
        result = {
            "case": case["name"],
            "bmr": bmr,
            "valid": is_valid,
            "details": case
        }
        results.append(result)
        
        print(f"üìä {case['name']}")
        print(f"   BMR: {bmr} kcal/dia")
        print(f"   V√°lido: {'‚úÖ' if is_valid else '‚ùå'}")
        print(f"   Detalhes: {case['weight']}kg, {case['height']}cm, {case['age']} anos")
        print()
    
    return results

def test_activity_factors():
    """Testa fatores de atividade"""
    print("üèÉ TESTANDO FATORES DE ATIVIDADE")
    print("=" * 50)
    
    calculator = MetabolicCalculator()
    
    activity_levels = [
        "sedentario",
        "leve", 
        "moderado",
        "ativo",
        "muito_ativo"
    ]
    
    experiences = [
        "iniciante",
        "intermediario", 
        "avancado",
        "expert"
    ]
    
    results = []
    
    for activity in activity_levels:
        for experience in experiences:
            factor = calculator.get_activity_factor(activity, experience)
            
            # Valida√ß√µes
            expected_range = (1.0, 2.2)  # Range t√≠pico de fatores
            is_valid = expected_range[0] <= factor <= expected_range[1]
            
            result = {
                "activity": activity,
                "experience": experience,
                "factor": factor,
                "valid": is_valid
            }
            results.append(result)
            
            print(f"üìà {activity.title()} + {experience.title()}: {factor}")
    
    print(f"\n‚úÖ Todos os fatores v√°lidos: {all(r['valid'] for r in results)}")
    return results

def test_tdee_calculations():
    """Testa c√°lculos de TDEE com fatores adicionais"""
    print("\n‚ö° TESTANDO C√ÅLCULOS DE TDEE")
    print("=" * 50)
    
    calculator = MetabolicCalculator()
    
    # Caso base
    bmr = 1800
    activity_factor = 1.55
    
    test_scenarios = [
        {
            "name": "Pessoa normal",
            "stress_level": 5,
            "sleep_hours": 7.5,
            "medications": []
        },
        {
            "name": "Alto estresse",
            "stress_level": 9,
            "sleep_hours": 7.5,
            "medications": []
        },
        {
            "name": "Pouco sono",
            "stress_level": 5,
            "sleep_hours": 5,
            "medications": []
        },
        {
            "name": "Com metformina",
            "stress_level": 5,
            "sleep_hours": 7.5,
            "medications": ["metformina"]
        },
        {
            "name": "Com levotiroxina",
            "stress_level": 5,
            "sleep_hours": 7.5,
            "medications": ["levotiroxina"]
        }
    ]
    
    results = []
    
    for scenario in test_scenarios:
        tdee = calculator.calculate_tdee(
            bmr=bmr,
            activity_factor=activity_factor,
            stress_level=scenario["stress_level"],
            sleep_hours=scenario["sleep_hours"],
            medications=scenario["medications"]
        )
        
        # Valida√ß√µes
        base_tdee = bmr * activity_factor
        variation = abs(tdee - base_tdee) / base_tdee
        is_reasonable = variation <= 0.15  # M√°ximo 15% de varia√ß√£o
        
        result = {
            "scenario": scenario["name"],
            "tdee": tdee,
            "base_tdee": base_tdee,
            "variation": round(variation * 100, 1),
            "reasonable": is_reasonable
        }
        results.append(result)
        
        print(f"üéØ {scenario['name']}")
        print(f"   TDEE: {tdee} kcal/dia")
        print(f"   Base: {base_tdee} kcal/dia")
        print(f"   Varia√ß√£o: {result['variation']}%")
        print(f"   Razo√°vel: {'‚úÖ' if is_reasonable else '‚ùå'}")
        print()
    
    return results

def test_macro_distribution():
    """Testa distribui√ß√£o de macronutrientes"""
    print("üçé TESTANDO DISTRIBUI√á√ÉO DE MACRONUTRIENTES")
    print("=" * 50)
    
    calculator = MetabolicCalculator()
    
    test_cases = [
        {
            "name": "Perda de peso",
            "calories": 1800,
            "goal": "perda_peso",
            "weight": 80,
            "activity_level": "moderado"
        },
        {
            "name": "Ganho de massa",
            "calories": 2500,
            "goal": "ganho_massa",
            "weight": 70,
            "activity_level": "ativo"
        },
        {
            "name": "Manuten√ß√£o",
            "calories": 2200,
            "goal": "manutencao",
            "weight": 75,
            "activity_level": "leve"
        },
        {
            "name": "Performance",
            "calories": 2800,
            "goal": "performance",
            "weight": 85,
            "activity_level": "muito_ativo"
        }
    ]
    
    results = []
    
    for case in test_cases:
        macros = calculator.calculate_macro_distribution(
            calories=case["calories"],
            goal=case["goal"],
            weight=case["weight"],
            activity_level=case["activity_level"]
        )
        
        # Calcular calorias totais dos macros
        total_calories = (macros["protein_grams"] * 4) + (macros["carbs_grams"] * 4) + (macros["fat_grams"] * 9)
        
        # Calcular percentuais
        protein_pct = (macros["protein_grams"] * 4) / total_calories * 100
        carbs_pct = (macros["carbs_grams"] * 4) / total_calories * 100
        fat_pct = (macros["fat_grams"] * 9) / total_calories * 100
        
        # Valida√ß√µes
        calorie_diff = abs(total_calories - case["calories"])
        calorie_accuracy = calorie_diff <= 50  # M√°ximo 50 kcal de diferen√ßa
        
        protein_ok = 10 <= protein_pct <= 35  # Range recomendado
        carbs_ok = 45 <= carbs_pct <= 65
        fat_ok = 20 <= fat_pct <= 35
        
        result = {
            "case": case["name"],
            "target_calories": case["calories"],
            "actual_calories": round(total_calories),
            "macros": macros,
            "percentages": {
                "protein": round(protein_pct, 1),
                "carbs": round(carbs_pct, 1),
                "fat": round(fat_pct, 1)
            },
            "validations": {
                "calorie_accuracy": calorie_accuracy,
                "protein_range": protein_ok,
                "carbs_range": carbs_ok,
                "fat_range": fat_ok
            }
        }
        results.append(result)
        
        print(f"üéØ {case['name']} ({case['goal']})")
        print(f"   Calorias: {case['calories']} ‚Üí {round(total_calories)} kcal")
        print(f"   Prote√≠na: {macros['protein_grams']}g ({round(protein_pct, 1)}%)")
        print(f"   Carboidratos: {macros['carbs_grams']}g ({round(carbs_pct, 1)}%)")
        print(f"   Gordura: {macros['fat_grams']}g ({round(fat_pct, 1)}%)")
        print(f"   Fibra: {macros['fiber_grams']}g")
        print(f"   V√°lido: {'‚úÖ' if all(result['validations'].values()) else '‚ùå'}")
        print()
    
    return results

def test_integration_scenario():
    """Testa cen√°rio completo de c√°lculo"""
    print("üîÑ TESTANDO CEN√ÅRIO COMPLETO DE INTEGRA√á√ÉO")
    print("=" * 50)
    
    calculator = MetabolicCalculator()
    
    # Usu√°rio exemplo: Mulher, 28 anos, quer perder peso
    user_profile = {
        "weight": 68,
        "height": 165,
        "age": 28,
        "gender": "female",
        "body_fat": 28,
        "activity_level": "moderado",
        "goal": "perda_peso",
        "stress_level": 6,
        "sleep_hours": 7,
        "medications": []
    }
    
    print(f"üë§ Perfil do usu√°rio:")
    print(f"   Mulher, {user_profile['age']} anos")
    print(f"   {user_profile['weight']}kg, {user_profile['height']}cm")
    print(f"   {user_profile['body_fat']}% de gordura")
    print(f"   Atividade: {user_profile['activity_level']}")
    print(f"   Objetivo: {user_profile['goal']}")
    print()
    
    # Passo 1: Calcular BMR
    bmr = calculator.calculate_bmr(
        weight=user_profile["weight"],
        height=user_profile["height"],
        age=user_profile["age"],
        gender=user_profile["gender"],
        body_fat_percentage=user_profile["body_fat"]
    )
    
    # Passo 2: Calcular fator de atividade
    activity_factor = calculator.get_activity_factor(
        user_profile["activity_level"],
        "iniciante"
    )
    
    # Passo 3: Calcular TDEE
    tdee = calculator.calculate_tdee(
        bmr=bmr,
        activity_factor=activity_factor,
        stress_level=user_profile["stress_level"],
        sleep_hours=user_profile["sleep_hours"],
        medications=user_profile["medications"]
    )
    
    # Passo 4: Calcular calorias por objetivo
    maintenance_calories = tdee
    cutting_calories = tdee * 0.85  # D√©ficit de 15%
    bulking_calories = tdee * 1.15  # Super√°vit de 15%
    
    # Para perda de peso, usar cutting calories
    target_calories = cutting_calories
    
    # Passo 5: Calcular macronutrientes
    macros = calculator.calculate_macro_distribution(
        calories=target_calories,
        goal=user_profile["goal"],
        weight=user_profile["weight"],
        activity_level=user_profile["activity_level"],
        body_fat_percentage=user_profile["body_fat"]
    )
    
    # Resultados
    results = {
        "bmr": bmr,
        "activity_factor": activity_factor,
        "tdee": tdee,
        "calories": {
            "maintenance": maintenance_calories,
            "cutting": cutting_calories,
            "bulking": bulking_calories,
            "target": target_calories
        },
        "macros": macros
    }
    
    print(f"üìä Resultados dos c√°lculos:")
    print(f"   BMR: {bmr} kcal/dia")
    print(f"   Fator de atividade: {activity_factor}")
    print(f"   TDEE: {tdee} kcal/dia")
    print(f"   Calorias para perda de peso: {target_calories} kcal/dia")
    print(f"   Prote√≠na: {macros['protein_grams']}g")
    print(f"   Carboidratos: {macros['carbs_grams']}g")
    print(f"   Gordura: {macros['fat_grams']}g")
    print(f"   Fibra: {macros['fiber_grams']}g")
    
    # Valida√ß√µes finais
    protein_per_kg = macros["protein_grams"] / user_profile["weight"]
    deficit_percentage = (tdee - target_calories) / tdee * 100
    
    print(f"\n‚úÖ Valida√ß√µes:")
    print(f"   Prote√≠na por kg: {round(protein_per_kg, 1)}g/kg (ideal: 1.6-2.2)")
    print(f"   D√©ficit cal√≥rico: {round(deficit_percentage, 1)}% (ideal: 10-20%)")
    print(f"   BMR razo√°vel: {'‚úÖ' if 1200 <= bmr <= 2000 else '‚ùå'}")
    print(f"   TDEE razo√°vel: {'‚úÖ' if 1500 <= tdee <= 3000 else '‚ùå'}")
    
    return results

def main():
    """Executa todos os testes"""
    print("üß™ INICIANDO TESTES DOS C√ÅLCULOS METAB√ìLICOS")
    print("=" * 60)
    print()
    
    try:
        # Executar todos os testes
        bmr_results = test_bmr_calculations()
        activity_results = test_activity_factors()
        tdee_results = test_tdee_calculations()
        macro_results = test_macro_distribution()
        integration_result = test_integration_scenario()
        
        # Resumo final
        print("\n" + "=" * 60)
        print("üìã RESUMO DOS TESTES")
        print("=" * 60)
        
        bmr_valid = all(r['valid'] for r in bmr_results)
        activity_valid = all(r['valid'] for r in activity_results)
        tdee_valid = all(r['reasonable'] for r in tdee_results)
        macro_valid = all(all(r['validations'].values()) for r in macro_results)
        
        print(f"‚úÖ BMR Calculations: {'PASSOU' if bmr_valid else 'FALHOU'}")
        print(f"‚úÖ Activity Factors: {'PASSOU' if activity_valid else 'FALHOU'}")
        print(f"‚úÖ TDEE Calculations: {'PASSOU' if tdee_valid else 'FALHOU'}")
        print(f"‚úÖ Macro Distribution: {'PASSOU' if macro_valid else 'FALHOU'}")
        print(f"‚úÖ Integration Test: PASSOU")
        
        overall_success = all([bmr_valid, activity_valid, tdee_valid, macro_valid])
        
        print(f"\nüéØ RESULTADO GERAL: {'‚úÖ TODOS OS TESTES PASSARAM' if overall_success else '‚ùå ALGUNS TESTES FALHARAM'}")
        
        # Salvar resultados
        all_results = {
            "bmr_tests": bmr_results,
            "activity_tests": activity_results,
            "tdee_tests": tdee_results,
            "macro_tests": macro_results,
            "integration_test": integration_result,
            "summary": {
                "bmr_valid": bmr_valid,
                "activity_valid": activity_valid,
                "tdee_valid": tdee_valid,
                "macro_valid": macro_valid,
                "overall_success": overall_success
            }
        }
        
        with open('/home/ubuntu/anamnese_test_results.json', 'w', encoding='utf-8') as f:
            json.dump(all_results, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"\nüíæ Resultados salvos em: /home/ubuntu/anamnese_test_results.json")
        
        return overall_success
        
    except Exception as e:
        print(f"\n‚ùå ERRO DURANTE OS TESTES: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)

