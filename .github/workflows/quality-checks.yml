name: Quality Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Python quality tools
      run: |
        pip install flake8 black isort mypy bandit safety
    
    - name: Install Node.js quality tools
      run: |
        npm install -g eslint prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin
    
    - name: Run Python linting
      run: |
        find backend -name "*.py" -exec flake8 {} + || true
        find backend -name "*.py" -exec black --check {} + || true
        find backend -name "*.py" -exec isort --check-only {} + || true
    
    - name: Run Python type checking
      run: |
        find backend -name "*.py" -exec mypy {} + || true
    
    - name: Run Python security scan
      run: |
        find backend -name "*.py" -exec bandit {} + || true
        safety check || true
    
    - name: Run JavaScript/TypeScript linting
      run: |
        find frontend -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | \
        xargs eslint || true
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Check Python dependencies
      run: |
        for service in backend/services/*/; do
          if [ -f "$service/requirements.txt" ]; then
            echo "Checking $service"
            cd "$service"
            pip install safety
            safety check -r requirements.txt || true
            cd - > /dev/null
          fi
        done
    
    - name: Check Node.js dependencies
      run: |
        for app in frontend/*/; do
          if [ -f "$app/package.json" ]; then
            echo "Checking $app"
            cd "$app"
            npm audit --audit-level=moderate || true
            cd - > /dev/null
          fi
        done
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'EvolveYou'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
    
    - name: Upload OWASP results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install license checker
      run: npm install -g license-checker
    
    - name: Check frontend licenses
      run: |
        for app in frontend/*/; do
          if [ -f "$app/package.json" ]; then
            echo "Checking licenses for $app"
            cd "$app"
            npm install
            license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense' || true
            cd - > /dev/null
          fi
        done
    
    - name: Check Python licenses
      run: |
        pip install pip-licenses
        for service in backend/services/*/; do
          if [ -f "$service/requirements.txt" ]; then
            echo "Checking licenses for $service"
            cd "$service"
            pip install -r requirements.txt
            pip-licenses --allow-only 'MIT;Apache Software License;BSD License;ISC License' || true
            cd - > /dev/null
          fi
        done

  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install performance tools
      run: |
        pip install py-spy memory-profiler line-profiler
    
    - name: Run backend performance tests
      run: |
        for service in backend/services/*/; do
          if [ -f "$service/tests/test_performance.py" ]; then
            echo "Running performance tests for $service"
            cd "$service"
            pip install -r requirements.txt
            python -m pytest tests/test_performance.py -v || true
            cd - > /dev/null
          fi
        done
    
    - name: Bundle size analysis
      run: |
        for app in frontend/*/; do
          if [ -f "$app/package.json" ]; then
            echo "Analyzing bundle size for $app"
            cd "$app"
            npm install
            npm run build
            npx bundlesize || true
            cd - > /dev/null
          fi
        done

  documentation-check:
    name: Documentation Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install documentation tools
      run: |
        npm install -g markdownlint-cli alex write-good
    
    - name: Check markdown files
      run: |
        markdownlint docs/ README.md CONTRIBUTING.md || true
    
    - name: Check for insensitive language
      run: |
        alex docs/ README.md CONTRIBUTING.md || true
    
    - name: Check writing quality
      run: |
        write-good docs/*.md README.md CONTRIBUTING.md || true
    
    - name: Check for broken links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'

  api-documentation:
    name: API Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Generate API documentation
      run: |
        for service in backend/services/*/; do
          if [ -f "$service/src/main.py" ]; then
            echo "Generating docs for $service"
            cd "$service"
            pip install -r requirements.txt
            pip install pydoc-markdown
            
            # Start service in background
            python -m uvicorn src.main:app --port 8000 &
            SERVICE_PID=$!
            sleep 10
            
            # Generate OpenAPI spec
            curl http://localhost:8000/openapi.json > openapi.json || true
            
            # Kill service
            kill $SERVICE_PID || true
            
            cd - > /dev/null
          fi
        done
    
    - name: Validate OpenAPI specs
      run: |
        npm install -g @apidevtools/swagger-cli
        find . -name "openapi.json" -exec swagger-cli validate {} \; || true

  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Run backend coverage
      run: |
        for service in backend/services/*/; do
          if [ -f "$service/tests/" ]; then
            echo "Running coverage for $service"
            cd "$service"
            pip install -r requirements.txt
            pip install pytest-cov
            python -m pytest tests/ --cov=src --cov-report=xml --cov-report=term || true
            cd - > /dev/null
          fi
        done
    
    - name: Run frontend coverage
      run: |
        for app in frontend/*/; do
          if [ -f "$app/package.json" ]; then
            echo "Running coverage for $app"
            cd "$app"
            npm install
            npm test -- --coverage --watchAll=false || true
            cd - > /dev/null
          fi
        done
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./
        flags: unittests
        name: codecov-umbrella

  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install accessibility tools
      run: |
        npm install -g @axe-core/cli pa11y
    
    - name: Build and serve frontend
      run: |
        cd frontend/web-app
        npm install
        npm run build
        npx serve -s dist -p 3000 &
        sleep 10
    
    - name: Run accessibility tests
      run: |
        axe http://localhost:3000 --exit || true
        pa11y http://localhost:3000 || true

  mobile-compatibility:
    name: Mobile Compatibility Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install mobile testing tools
      run: |
        npm install -g lighthouse
    
    - name: Build and serve frontend
      run: |
        cd frontend/web-app
        npm install
        npm run build
        npx serve -s dist -p 3000 &
        sleep 10
    
    - name: Run mobile performance test
      run: |
        lighthouse http://localhost:3000 \
          --preset=perf \
          --emulated-form-factor=mobile \
          --throttling-method=simulate \
          --output=json \
          --output-path=lighthouse-mobile.json || true
    
    - name: Upload mobile test results
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-mobile-report
        path: lighthouse-mobile.json

  database-migration-check:
    name: Database Migration Check
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[migration]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Firebase tools
      run: |
        npm install -g firebase-tools
    
    - name: Validate Firestore rules
      run: |
        if [ -f "firestore.rules" ]; then
          firebase firestore:rules:validate firestore.rules --project=${{ secrets.FIREBASE_PROJECT_ID }}
        fi
    
    - name: Validate Firestore indexes
      run: |
        if [ -f "firestore.indexes.json" ]; then
          firebase firestore:indexes:validate firestore.indexes.json --project=${{ secrets.FIREBASE_PROJECT_ID }}
        fi

  notify-quality-results:
    name: Notify Quality Results
    needs: [code-quality, dependency-check, license-check, test-coverage]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'schedule'
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        channel: '#quality'
        custom_payload: |
          {
            "text": "Daily Quality Check Results",
            "attachments": [
              {
                "color": "${{ needs.code-quality.result == 'success' && 'good' || 'danger' }}",
                "fields": [
                  {
                    "title": "Code Quality",
                    "value": "${{ needs.code-quality.result }}",
                    "short": true
                  },
                  {
                    "title": "Dependencies",
                    "value": "${{ needs.dependency-check.result }}",
                    "short": true
                  },
                  {
                    "title": "Licenses",
                    "value": "${{ needs.license-check.result }}",
                    "short": true
                  },
                  {
                    "title": "Test Coverage",
                    "value": "${{ needs.test-coverage.result }}",
                    "short": true
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

